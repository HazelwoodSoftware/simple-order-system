<?xml version="1.0" ?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <module name="TreeWalker">
        <property name="tabWidth" value="4"/>
        <property name="fileExtensions" value="java"/>
        <!-- Make sure names meet coding standards -->
        <module name="AbstractClassName">
            <property name="format" value="^Base.*$"/>
        </module>
        <!-- Compact annotations -->
        <module name="AnnotationUseStyle"/>
        <!-- Don't allow long anonymous inner classes -->
        <module name="AnonInnerLength">
            <property name="max" value="100"/>
        </module>
        <!-- Use "int[] x" and not "int x[]" -->
        <module name="ArrayTypeStyle">
            <property name="javaStyle" value="true"/>
        </module>
        <!-- Unnecessarily nested blocks aren't permitted -->
        <module name="AvoidNestedBlocks"/>
        <!-- Check that finds import statements that use the * notation -->
        <module name="AvoidStarImport"/>
        <!-- Restricts nested boolean operators (&&, ||, &, | and ^) to a specified depth -->
        <module name="BooleanExpressionComplexity">
            <property name="max" value="3"/>
        </module>
        <!-- This metric measures the number of instantiations of other classes within the given class -->
        <module name="ClassDataAbstractionCoupling">
            <property name="max" value="10"/>
        </module>
        <!-- The number of other classes a given class relies on -->
        <module name="ClassFanOutComplexity">
            <property name="max" value="20"/>
        </module>
        <!-- Make sure names meet coding standards -->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>
        <!-- Make sure names meet coding standards -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z]([A-Z0-9_]*[A-Z0-9])?$"/>
        </module>
        <!-- If you declare an equals() method taking anything but Object, you have to define the Object part as well -->
        <module name="CovariantEquals"/>
        <!-- Complexity checks, more than 5 is too complex for a method! -->
        <module name="CyclomaticComplexity">
            <property name="max" value="10"/>
        </module>
        <!-- Enforce the declaration order -->
        <module name="DeclarationOrder"/>
        <!-- make sure default is always last in a switch statement -->
        <module name="DefaultComesLast"/>
        <!-- We don't allow empty blocks; if an empty block is needed, please comment on why -->
        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="severity" value="error"/>
        </module>
        <module name="EmptyForInitializerPad">
            <property name="option" value="space"/>
        </module>
        <module name="EmptyForIteratorPad">
            <property name="option" value="space"/>
        </module>
        <!-- Disllows empty statements -->
        <module name="EmptyStatement"/>
        <!-- If you declare an equals() method, you need to declare hashCode as well -->
        <module name="EqualsHashCode"/>
        <!-- Do not explicitly initialise fields to their normal default values - ie, dont set object to null, dont set int to 0, etc -->
        <module name="ExplicitInitialization"/>
        <!-- Ensure that a class with only a private constructor is final; this is about expression of intent -->
        <module name="FinalClass"/>
        <!-- Checks that the whitespace around the Generic tokens < and > are correct to the typical convention -->
        <module name="GenericWhitespace"/>
        <!-- Checks that a local variable or a parameter does not shadow a field that is defined in the same class -->
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
        </module>
        <!-- Utitlity classes should not have constructors -->
        <module name="HideUtilityClassConstructor"/>
        <!-- Don't allow the following classes to be instantiated directly -->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>
        <!-- Disallow certain abstract types - must use interface -->
        <module name="IllegalType">
            <property name="illegalClassNames"
                      value="java.util.GregorianCalendar, java.util.Hashtable, java.util.HashSet, java.util.HashMap,
                       java.util.ArrayList, java.util.LinkedList, java.util.LinkedHashMap, java.util.LinkedHashSet,
                       java.util.TreeSet, java.util.TreeMap, java.util.Vector"/>
            <!-- Don't disallow based on name pattern -->
            <property name="format" value="^$"/>
        </module>
        <module name="ImportControl">
            <property name="file" value="${checkstyle.import.control.file}"/>
        </module>
        <!-- Code formatting -->
        <module name="Indentation"/>
        <!-- Only allow assignments as the primary point of a method, not as a side-effect -->
        <module name="InnerAssignment"/>
        <!-- Check nested (internal) classes/interfaces are declared at the bottom of the class after all method and field declarations -->
        <module name="InnerTypeLast"/>
        <!-- Interfaces should represent types. As such, interfaces with no methods (but a heap of constants) are not appropriate.
        The use of marker interfaces (e.g. Serializable) is okay, however -->
        <module name="InterfaceIsType">
            <property name="allowMarkerInterfaces" value="true"/>
        </module>
        <!-- Quick check to ensure that JUnit tests are set up right -->
        <module name="JUnitTestCase"/>
        <!-- Line limits for file, class and methods -->
        <module name="JavaNCSS">
            <property name="classMaximum" value="300"/>
            <property name="methodMaximum" value="50"/>
            <property name="fileMaximum" value="500"/>
        </module>
        <!-- Check for badly formed Javadoc -->
        <module name="JavadocStyle">
            <property name="scope" value="protected"/>
        </module>
        <!-- While we do not have a policy on where the left curly brace goes, we have a strong preference for it being on the end of the line -->
        <module name="LeftCurly">
            <!-- Curly braces in new line -->
            <property name="option" value="nl"/>
        </module>
        <!-- Ignore the maximum line length restriction for import statements -->
        <module name="LineLength">
            <property name="ignorePattern" value="^import"/>
            <property name="max" value="150"/>
        </module>
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <!-- Starts with a lower-case letter, with an optional underscore prefix (Although that should be discouraged) -->
        <module name="MemberName">
            <property name="format" value="^[_a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <!-- Switch statements need to have a default case -->
        <module name="MissingSwitchDefault"/>
        <!-- don't allow control variable to be modified inside a for loop -->
        <module name="ModifiedControlVariable"/>
        <!-- Enforce modifiers are declared as per the Java Language Specification -->
        <module name="ModifierOrder"/>
        <!-- Each variable must be decalred on it's own line and in it's own statement -->
        <module name="MultipleVariableDeclarations"/>
        <!-- Ensure that exceptions are immutable -->
        <module name="MutableException"/>
        <!-- Checks the npath complexity against a specified limit -->
        <module name="NPathComplexity">
            <property name="max" value="100"/>
        </module>
        <!-- All blocks require braces; no sloppy implicit one-statement blocks -->
        <module name="NeedBraces"/>
        <!-- Don't allow deeply nested for statements -->
        <module name="NestedForDepth">
            <property name="max" value="3"/>
        </module>
        <!-- Don't allow deeply nested if statements -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <!-- Don't allow deeply nested if statements -->
        <module name="NestedTryDepth">
            <property name="max" value="1"/>
        </module>
        <!-- Don't allow whitespace after typical unary operators (but not array initialisors) -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
            <property name="allowLineBreaks" value="false"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="allowLineBreaks" value="false"/>
        </module>
        <!-- Checks there is only one statement per line -->
        <module name="OneStatementPerLine"/>
        <!-- Line wraps should occur _after_ operators, not before them -->
        <module name="OperatorWrap">
            <property name="option" value="eol"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR"/>
        </module>
        <!-- The one exception is the colon operator as part of the ternary conditional operator -->
        <module name="OperatorWrap">
            <property name="option" value="nl"/>
            <property name="tokens" value="COLON"/>
        </module>
        <!-- All classes should have packages - no class should be in the "Default" package -->
        <module name="PackageDeclaration"/>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <!-- check for parameter assignment -->
        <module name="ParameterAssignment"/>
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <!-- Limit the number of parameters for a method -->
        <module name="ParameterNumber">
            <property name="max" value="10"/>
        </module>
        <!-- There should be no whitespace after an opening parenthesis or before a closing parenthesis -->
        <module name="ParenPad"/>
        <!-- No imports from the same package -->
        <module name="RedundantImport"/>
        <!-- Disallow redundant modifiers (such as public methods, in an interface) -->
        <module name="RedundantModifier"/>
        <!-- Methods should not declare subclasses of types of exceptions. This helps avoid proliferation of exceptions -->
        <module name="RedundantThrows"/>
        <!-- enforce the use of logging -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.out|System\.err|\.printStackTrace\(\)"/>
            <property name="ignoreComments" value="true"/>
        </module>
        <!-- Quick check to ensure that there aren't too many return statements in a method -->
        <module name="ReturnCount">
            <property name="max" value="1"/>
        </module>
        <!-- Right curly braces should be on the same line as the following left curly brace, where there is (e.g. sequential if else, catches) -->
        <module name="RightCurly">
            <property name="option" value="alone"/>
        </module>
        <!-- Don't use complicated boolean logic for return statements -->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <!-- Starts with a lower-case letter, with an optional underscore prefix (Although that should be discouraged) -->
        <module name="StaticVariableName">
            <property name="format" value="^[_a-z][a-zA-Z0-9]*$"/>
        </module>
        <!-- Dont allow for the use of == for String comparisions -->
        <module name="StringLiteralEquality"/>
        <!-- If you clone an ojbect, invoke super.clone()! -->
        <module name="SuperClone"/>
        <!-- If you finalize an ojbect, invoke super.clone()! -->
        <module name="SuperFinalize"/>
        <!-- Limit the number of exceptions that can be thrown by a method -->
        <module name="ThrowsCount">
            <property name="max" value="3"/>
        </module>
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z]*$"/>
        </module>
        <!-- No whitespaces inside of a typecast -->
        <module name="TypecastParenPad"/>
        <!-- Check for unneeded parentheses -->
        <module name="UnnecessaryParentheses"/>
        <!-- Unused imports clutter the code and are not allowed -->
        <module name="UnusedImports"/>
        <!-- Make sure people use upper-case Ls, because "one" and "ell" look the same - 1 and l -->
        <module name="UpperEll"/>
        <!-- Ensure non-final members are private -->
        <module name="VisibilityModifier"/>
        <!-- Enforce whitespace around most other typical operators -->
        <module name="WhitespaceAround">
            <property name="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN"/>
        </module>
        <!-- Enforce whitespace after commas, semi-colons, and typecasts -->
        <module name="WhitespaceAfter"/>
    </module>
    <!-- Tab characters are not allowed in source files -->
    <module name="FileTabCharacter"/>
    <module name="Header">
        <property name="headerFile" value="${checkstyle.header.file}"/>
        <property name="ignoreLines" value="1, 2, 4, 8, 9"/>
    </module>
    <module name="StrictDuplicateCode">
        <property name="min" value="50"/>
    </module>
    <module name="SuppressionFilter">
        <property name="file" value="${checkstyle.suppressions.file}"/>
    </module>
</module>